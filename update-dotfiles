#!/usr/bin/env python
#This fetches the latest files from the repo and puts them in the given folder
from __future__ import print_function, with_statement
from urllib import urlopen
from argparse import ArgumentParser
import json, os, syslog

if __name__ == "__main__":
    #Get options
    parser = ArgumentParser(usage="update-dotfiles")
    parser.add_argument("-c", "--cron", dest="runSilent",
                help="run in cronjob (silent) mode", action="store_true", default=False)
    parser.add_argument("-d", "--dir", dest="directory",
                help="directory to save files to, default ~/", default=os.getenv("HOME"))
    parser.add_argument("-C", "--no-check-hash", dest="logHash",
                help="don't check for revision hash in .dotfileshash", action="store_false", default=True)
    
    args = parser.parse_args()
    
    #By default, we log with print
    log = print
    
    #Wrapper for syslog to prepend dir information
    def silentLog(msg):
        syslog.syslog("[dir %s] %s" % (os.path.basename(os.getcwd()), msg))
    
    #Use syslog if we're running in cron mode
    if args.runSilent:
        log = silentLog
    
    #Confirm, for safety's sake
    if not args.runSilent:
        yesNo = raw_input("Are you sure? (y/N) ")
        if yesNo != "y":
            log("Aborting.")
            os.sys.exit()
    
    #Fetch a file and make sure the server didn't mess up
    def getFile(url, logName):
        file = urlopen(url)
        status = file.getcode()
        
        #Did the server mess up?
        if not status is 200:
            log("Error fetching %s, server returned status code %s" % (logName, status))
            os.sys.exit()
        
        #It didn't, return the file.
        contents = file.read()
        file.close()
        return contents
    
    #Get the revision hash to calculate the base URL
    revisionHash = json.loads(\
        getFile("http://api.bitbucket.org/1.0/repositories/Yoplitein/tildeslash/changesets", "changesets"))\
        ["changesets"][-1]["node"]
    baseURL = "https://bitbucket.org/Yoplitein/tildeslash/raw/" + revisionHash + "/"
    
    #Change to the specified directory
    os.chdir(args.directory)
    
    #Check for a hash, if enabled
    if args.logHash:
        try:
            upHash = ""
            with open(".dotfileshash", "r") as f:
                upHash = f.read()
            if(upHash == revisionHash):
                log("All files are at latest revision, exiting")
                os.sys.exit()
        except IOError:
            pass
    
    #Get the file and folder lists
    fileFolderList = getFile(baseURL + "files.txt", "file and folder list").split("--FOLDERS--")
    fileNames = fileFolderList[0].split("\n")[0:-1] #last file has \n at end
    folderNames = fileFolderList[1].split("\n")[1:] #first folder has \n at beginning
    
    #Make sure each folder exists
    for folder in folderNames:
        if not os.path.exists(folder):
            os.mkdir(folder)
    
    #Write the files
    for fileName in fileNames:
        #we're evaluating this here so we don't exit with open file handlers if there's an error
        bbFile = getFile(baseURL + fileName, fileName)
        
        try:
            with open(fileName, "w") as file:
                file.write(bbFile)
                file.flush()
                file.close()
        except IOError as e:
            log("Error: Unable to write %s to disk. (%s)" % (fileName, e))
            log("Exiting.")
            os.sys.exit()
        if not args.runSilent:
            log("Wrote %s to disk." % fileName)
    
    #Write hash to .dotfileshash
    if args.logHash:
        try:
            with open(".dotfileshash", "w") as hashFile:
                hashFile.write(revisionHash)
                hashFile.flush()
        except IOError as e:
            log("Unable to save revision hash. (%s)" % e)
    
    log("Successfully updated all files to revision %s." % revisionHash)
